var Folder = require('./folder');
var debug = require('debug')('box-api:folder-api');

function FolderAPI(client) {
  this.client = client;
}

FolderAPI.prototype.get = function(folderId, callback) {
  var client = this.client;
  var obj = client.cache.get('folder', folderId);
  if (obj) {
    debug('retrieved %s from cache', obj);
    return process.nextTick(callback.bind(null, null, obj));
  }
  client.request.get({
    json: true,
    url: 'folders/' + folderId
  }, function(err, response, body) {
    if (!err && response.statusCode !== 200) {
      err = new Error(response.statusCode + ': ' + response.statusMessage);
      debug('err: non-200 status', body);
    }
    obj = !err && new Folder(client, body);
    if (obj) { client.cache.store(obj); }
    callback(err, obj);
  });
};

FolderAPI.prototype.getItems = function(folderId, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  this.client.request.get({
    json: true,
    qs: options,
    url: '/folders/' + folderId + '/items'
  }, function(err, response, body) {
    if (!err && response.statusCode !== 200) {
      err = new Error(response.statusCode + ': ' + response.statusMessage);
      debug('err: non-200 status', body);
    }
    callback(err, body);
  });
};

FolderAPI.prototype.getByPath = function(path, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  var splitPath = path.split('/');
  var folderApi = this;

  folderApi.get(0, function(err, rootFolder) {
    if (err) return callback(err);

    debug('fetched root folder %s', rootFolder);
    (function traverseFolder(parentFolder) {
      while(splitPath.length && !splitPath[0]) { splitPath.shift(); } // ignore any empty segments
      var name = splitPath.shift();
      if (!name) { return callback(null, parentFolder); }
      parentFolder.findItemByName(name, function(err, folder) {
        if (err) {
          if (options.create && err.name === 'ItemNotFound') {
            debug('creating folder as it was not found');
            parentFolder.create(name, function(err, folder) {
              if (err) return callback(err);
              traverseFolder(folder);
            });
          } else {
            callback(err);
          }
        } else {
          traverseFolder(folder);
        }
      });
    })(rootFolder);
  });
};

FolderAPI.prototype.create = function(options, callback) {
  var client = this.client;
  client.request.post({
    json: options,
    url: 'folders'
  }, function(err, response, body) {
    if (!err && response.statusCode !== 201) {
      err = new Error(response.statusCode + ': ' + response.statusMessage);
      debug('err: non-201 status', body);
    }
    var data = !err && new Folder(client, body);
    callback(err, data);
  });
};

module.exports = FolderAPI;
