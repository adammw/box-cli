var _ = require('lodash');
var utils = require('./utils');
var error = require('./error');
var debug = require('debug')('box-api:folder');

var MAX_LIMIT = 1000;

function Folder(client, data) {
  this.client = client;
  this.data = data;
}

Folder.prototype.toString = function() {
  return '<Folder id="' + this.data.id + '" name="' + this.data.name + '">';
};

Folder.prototype.getItems = function(options, callback) {
  this.client.folder.getItems(this.data.id, options, callback);
};

Folder.prototype.findItemByName = function(name, callback) {
  debug('attempting to find item with name "%s" in %s', name, this);
  if (this.data.item_collection) {
    var entry = _.find(this.data.item_collection.entries, { name: name });
    if (entry) {
      var objKlass = utils.getType(entry.type);
      var obj = new objKlass(this.client, entry);
      debug('found item %s', obj);
      return process.nextTick(callback.bind(null, null, obj));
    }
  } else {
    this.data.item_collection = { entries: [] };
  }

  var offset = this.data.item_collection.entries.length;
  debug('looking at items %d-%d', offset, offset + MAX_LIMIT);
  this.getItems({ limit: MAX_LIMIT, offset: offset }, function handler(err, body) {
    this.data.item_collection.entries = this.data.item_collection.entries.concat(body.entries);
    var entry = _.find(body.entries, { name: name });
    if (entry) {
      var objKlass = utils.getType(entry.type);
      var obj = new objKlass(this.client, entry);
      debug('found item %s', obj);
      callback(null, obj);
    } else {
      offset += MAX_LIMIT;
      if (offset < body.total_count) {
        this.client.folder.getItems({ limit: MAX_LIMIT, offset: offset }, handler);
      } else {
        debug('end reached, could not find item');
        callback(new error.ItemNotFound('Could not find item', name));
      }
    }
  }.bind(this));
};

Folder.prototype.create = function(name, callback) {
  this.client.folder.create({ parent: { id: this.data.id }, name: name }, callback);
};

Folder.prototype.upload = function(file, options, callback) {
  this.client.file.upload(file, _.extend({ parent: { id: this.data.id } }, options), callback);
};

module.exports = Folder;
